

***********************************
 Alpha 0.1 - PLANNED
 -> Release on boss.bekk.no
***********************************

BUGS:
(None)


FEATURES:
 
* Verify working text reports for multiple expectations for same function
* Support specifying number of expected calls
	- never()
* Different mock implementations for multiple expectations


DONE:

* Integration with Scriptaculous test runner
* Text reporting for "at least", "at most" etc...
* Support setting multiple expectations for a function
* Refactor to storing separate invocation data
* Simple argument equality constraints
* Integration with JsSpec
* Support saving argument values for inspection
* Support specifying number of expected calls
	- atLeast(n)
	- atMost(n)
    - exactly(n)
	- once()
* Support specifying a return object directly
    - example: ooo.returnValue(myValue)
    - instead of: ooo.mock(function(){return myValue})
* Support for mocking/stubbing any function or object with multiple function



***********************************
 LATER RELEASES
***********************************

BUGS:

* IE reports failed expectations multiple times
* Unable to test parts of JSSpec integration


FEATURES: 

* Support specifying argument constraints in expectations
* Support grabbing deeper objects. Currently only one level.
* Report line numbers for failed expectations (may not be possible)





***********************************
 NOTES
***********************************

* Argument constraints
	- equal
		withArguments(isValue('Homer'), isValue('Simpson'), isValue(true), isValue(313))
	- not
		withArguments(isNotValue('Homer'))
	- regex
		withArguments(
	- one of ...
		withArguments(isOneOf('Maggie','Marge','Lisa'))
	- type
		withArguments(isType('string'), isType('object'))
	- object properties
		withArguments(hasProperty('name'))
		withArguments(hasProperty('name','Homer'))
		withArguments(hasProperies({name:'Homer',message:'DOH!'})
	- delegate constraints
		withArguments(myCustomConstraint)
		function myCustomConstraint(arg) { return true/false }
	- chained constraints for each argument
		withArguments(isValue('Maggie').or().isValue('Lisa'))
		withArguments(hasProperty('name','Homer').and().hasProperty('message','DOH!'))
		withArguments(hasProperty('name','Homer').or().hasProperty('message','DOH!'))

* Alternate syntax for arguments:
	jack.expect("something.setSometing")
		.whereArgument(0).is('Doh!')
		.whereArgument(1).isNot('Maggie')
		.whereArgument(2).isOneOf('Homer','Bart')
		.whereArgument(3).hasProperty('fast',true)
		.whereArgument(4).hasProperies({name:'Homer',message:'DOH!'}
		.whereArgument(5).isType('string')
		.whereArgument(6).matches(/d(o|u)h/)
		.returnValue("OK")

* Possible alternate syntax for expect
	jack(function(){
		expect(setOptions(hasProperty('host','example.com'))
		jack.expect("setOptions").withArguments(hasProperty('host','example.com'))
	});
